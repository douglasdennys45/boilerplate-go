// Code generated by MockGen. DO NOT EDIT.
// Source: lib/ports/usecases/add-log-usecases.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	usecases "clean-architeture/lib/ports/usecases"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAddLogUsecases is a mock of AddLogUsecases interface
type MockAddLogUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockAddLogUsecasesMockRecorder
}

// MockAddLogUsecasesMockRecorder is the mock recorder for MockAddLogUsecases
type MockAddLogUsecasesMockRecorder struct {
	mock *MockAddLogUsecases
}

// NewMockAddLogUsecases creates a new mock instance
func NewMockAddLogUsecases(ctrl *gomock.Controller) *MockAddLogUsecases {
	mock := &MockAddLogUsecases{ctrl: ctrl}
	mock.recorder = &MockAddLogUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAddLogUsecases) EXPECT() *MockAddLogUsecasesMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockAddLogUsecases) Add(data []byte) usecases.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", data)
	ret0, _ := ret[0].(usecases.Response)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockAddLogUsecasesMockRecorder) Add(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddLogUsecases)(nil).Add), data)
}
